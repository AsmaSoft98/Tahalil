@page "/analslist"

@attribute [Authorize]
@using System.Security.Claims;
<h3>Liste Des Analyses</h3>

<MudContainer>
    @if (list == null || isLoading)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @*<div class="d-flex justify-center mt-6">
            <MudButton Variant="Variant.Outlined"  Class="pa-2 mx-2">&larr;</MudButton>
            <MudButton Variant="Variant.Outlined"  Class="pa-2 mx-2">&rarr;</MudButton>
        </div>
        *@

        <MudGrid Spacing="3">
        <Virtualize Items="@list" Context="item" ItemSize="190" OverscanCount="10">
            <ItemContent>
                <MudItem xs="12" md="4" Class="mb-3">
                    <MudCard Outlined="true" Class="rounded-lg">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudAvatar Color="Color.Dark">A</MudAvatar>
                                <MudText Typo="Typo.h6">@item.User.Name</MudText>
                                <MudText Typo="Typo.subtitle2" Align="Align.End">(@item.User.Email)</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">Le: @item.Jour.ToString("yyyy/MM/dd")</MudText>
                            <MudDivider Class="mb-4 mt-2" Style="background-color:#1c74b4" />
                            <MudText Typo="Typo.body2" Align="Align.End">Montant: @item.Mnt</MudText>
                            <MudText Typo="Typo.body2" Align="Align.End">Field4: @item.codeAnal</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="ml-auto">Manage</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </ItemContent>
        </Virtualize>

    </MudGrid>
    }
</MudContainer>

@using Tahalil.BlazorUI.Extensions;

@code
{
        [CascadingParameter]
        private Task<AuthenticationState> AuthenticationState { get; set; }

        //[Inject] private AuthenticationStateProvider _authState { get; set; }
        List<Anal> list = new List<Anal>();
        bool isLoading = false;
        string UserId;

    protected override async Task OnInitializedAsync()
    {
        
            isLoading = true;

            var authState = await AuthenticationState;
            var userId = AuthStateUtils.GetUserIdFromAuthState(authState);

            list = await Http.GetFromJsonAsync<List<Anal>>($"api/anal/anals/{userId}");
            isLoading = false;
  
    }
}