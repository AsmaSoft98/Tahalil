@page "/login"
@layout LoginLayout

<EditForm Model="@user" OnValidSubmit="OnValidSubmit">
    <MudGrid>
        <DataAnnotationsValidator />
        <MudItem xs="12" sm="7">
            <MudItem xs="12" Class="pt-0 pr-7 pl-7">
                <MudItem xs="12" Class="d-flex justify-center mb-0">
                    <MudPaper Class="pa-4 ma-1 mt-10 rounded-circle">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#2261a1" width="48px"
                             height="48px">
                            <path d="M0 0h24v24H0z" fill="none" />
                            <path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z" />
                        </svg>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" Class="mb-0 pa-0">
                    <MudTextField T="string"
                                  Label="User Email"
                                  Variant="Variant.Text"
                                  Margin="Margin.None"
                                  @bind-Value="user.Email"
                                  For="@(() => user.Email)"
                                  Class="mb-1 pa-0" />
                </MudItem>

                <MudItem xs="12" Class="mb-0">
                    <MudTextField T="string"
                                  Label="Password"
                                  Variant="Variant.Text"
                                  @bind-Value="user.Password"
                                  For="@(() => user.Password)"
                                  InputType="@PasswordInput"
                                  Class="mb-0 pa-0"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="TogglePasswordVisibility" />
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-center mt-4 mb-4 pa-2">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                               Color="Color.Secondary"
                               Size="Size.Large"  FullWidth="true" Style="font-size:16px;" OnClick="OnValidSubmit">
                        LogIn
                    </MudButton>
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-end align-center">
                    <MudLink Class="pa-1 mx-1" Style="display:block;" Href="">
                        Forgot Password
                    </MudLink>
                </MudItem>
            </MudItem>
        </MudItem>
        @*<MudItem sm="5" Class="d-none d-sm-flex pa-0 login-p">
            </MudItem>
        </MudItem>*@
        <MudItem xs="5" sm="5" Class="d-none d-sm-flex pa-0">
            <MudImage Src="svg/login.png" ObjectFit="ObjectFit.Fill" Height="452" Class="rounded-lg "/>
        </MudItem>
    </MudGrid>
</EditForm>

<style>
    .login-p {
        background-image: url(img/img3.jpg);
        height: 452px;
        background-size: cover;
        background-position: center;
        border-radius: 0px 18px 18px 0px;
        top: 12px;
        position: relative;
        left: -14px;
    }
</style>


@code {
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    bool _loader = false;
    private UserLogin user = new UserLogin();
    private async void OnValidSubmit()
    {
        _loader = true;
        var result = await authService.LogIn(user);
        try
        {
            if (result.Success)
            {
                await localStorageService.SetItemAsync<string>("authToken", result.Data);
                await authenticationStateProvider.GetAuthenticationStateAsync();
                navigationManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Add(result.Message, Severity.Error);
           
            }

        }
        catch
        {

        }
        _loader = false;
    }
    void TogglePasswordVisibility()
    {
        if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}



