

<AuthorizeView>
    <Authorized>
        <MudAvatar Color="Color.Secondary" Class="ma-2" @onmouseover="() => _userMenuOpen = true">
            @(context.User.Identity.Name is null ? "" : context.User.Identity.Name.First())
        </MudAvatar>
         <b>@context.User.Identity.Name!</b>
  
        @*<MudButton Variant="Variant.Filled" Color="Color.Secondary" class="ml-2" OnClick="Logout">Logout</MudButton>*@
        <MudPopover AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
                    Open="@_userMenuOpen" @onmouseleave="() => _userMenuOpen = false">
            <MudTabs Outlined="false" MinimumTabWidth="30px" Position="Position.Right">
                <MudTabPanel Text="Edit" Icon="@Icons.Material.Filled.Edit" />
                <MudTabPanel Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" />
            </MudTabs>
        </MudPopover>
    </Authorized>
    <NotAuthorized>
        <MudButton Link="/login" Variant="Variant.Filled" Color="Color.Secondary" class="ml-2">Login</MudButton>
        
    </NotAuthorized>
</AuthorizeView>

@code {
    bool _userMenuOpen = false;
    async Task Logout()
    {
        await localStorageService.RemoveItemAsync("authToken");
        await authenticationStateProvider.GetAuthenticationStateAsync();
        //navigationManager.NavigateTo("/");
    }
}